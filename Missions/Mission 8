#
# CS1010S --- Programming Methodology
#
# Mission 8: 3-station IPPT
#

##########
# Task 1 #
##########

def read_data(filename):
    rows = read_csv(filename)
    
    rep_title = map(int, rows[0][1:])
    
    age_title = ()
    data = ()
    for i in rows[1:]:
        age_title += (int(i[0]),)
        data += (map(int, i[1:]),)
        
    return create_table(data, age_title, rep_title)


##########
# Task 2 #
##########

def pushup_score(pushup_table, age, pushup):
    if pushup > 60:
        pushup = 60
    if pushup == 0:
        pushup = 1
    if age < 18:
        age = 18
    elif age > 60:
        age = 60
        
    return access_cell(pushup_table, age, pushup)

def situp_score(situp_table, age, situp):
    if situp > 60:
        situp = 60
    if situp == 0:
        situp = 1
    if age < 18:
        age = 18
    elif age > 60:
        age = 60
        
    return access_cell(situp_table, age, situp)

def run_score(run_table, age, run):
    if run%10 == 0:
        corrected_run = run
    else:
        corrected_run = (run//10 +1)*10
    
    if corrected_run < 510:
        corrected_run = 510
    elif corrected_run > 1100:
        corrected_run = 1100

    if age < 18:
        age = 18
    elif age > 60:
        age = 60
        
    return access_cell(run_table, age, corrected_run)


##########
# Task 3 #
##########

def ippt_award(score):
    if score < 51:
        return 'F'
    elif 51 <= score <61:
        return 'P'
    elif 61 <= score <75:
        return 'P$'
    elif 75 <= score <85:
        return 'S'
    else:
        return 'G'


##########
# Task 4 #
##########

def ippt_results(ippt_table, age, pushup, situp, run):
    
    pu_score = pushup_score(get_pushup_table(ippt_table), age, pushup)
    su_score = situp_score(get_situp_table(ippt_table), age, situp)
    running_score = run_score(get_run_table(ippt_table), age, run)

    total_score = pu_score + su_score + running_score
    award = ippt_award(total_score)

    return (total_score, award)


##########
# Task 5 #
##########

def make_training_program(rate_pushup, rate_situp, rate_run):
    
    def training_program(ippt_table, age, pushup, situp, run, days):
        improve_pu = int((days/ rate_pushup)) + pushup
        improve_su = int((days / rate_situp)) + situp
        improve_run = run - int((days / rate_run))
        
        results = ippt_results(ippt_table, age, improve_pu, improve_su, improve_run)

        return (improve_pu, improve_su, improve_run, (results))
        
    return training_program

# DO NOT REMOVE THE CODE BELOW
tp = make_training_program(7, 3, 10)


########################
# Bonus: Skip Leg Day  #
########################

def make_tp_bonus(rate_pushup, rate_situp, rate_run):

    def tp_bonus(ippt_table, age, pushup, situp, run, days):
    
        if days == 0:
            results = ippt_results(ippt_table, age, pushup, situp, run)
            return (pushup, situp, run, results)

        elif days < rate_pushup and days < rate_situp and days < rate_run:
            results = ippt_results(ippt_table, age, pushup, situp, run)
            return (pushup, situp, run, results)
            
        elif days >= rate_pushup and days < rate_situp and days < rate_run:
            return tp_bonus(ippt_table, age, pushup + 1, situp, run, days - rate_pushup)

        elif days < rate_pushup and days >= rate_situp and days < rate_run:
            return tp_bonus(ippt_table, age, pushup, situp + 1, run, days - rate_situp)

        elif days < rate_pushup and days < rate_situp and days >= rate_run:
            return tp_bonus(ippt_table, age, pushup, situp, run - 1, days - rate_run)

        else:
            a = tp_bonus(ippt_table, age, pushup + 1, situp, run, days - rate_pushup)
            b = tp_bonus(ippt_table, age, pushup, situp + 1, run, days - rate_situp)
            c = tp_bonus(ippt_table, age, pushup, situp, run - 1, days - rate_run)

            results = tuple(filter(lambda x: x[3][0]==max(a[3][0],b[3][0],c[3][0]),(a,b,c)))
            return results[0]
                       
    return tp_bonus
