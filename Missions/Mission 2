#
# CS1010S --- Programming Methodology
#
# Mission 2 - Cyclic Runes
#

###########
# Task 1a #
###########

def fractal(rune, n):
    if n == 1:
        return rune
    else:
        return beside(rune, stack(fractal(rune, n-1), fractal(rune, n-1)))


###########
# Task 1b #
###########

def fractal_iter(rune, n):
    if n == 1:
        return rune
    else:
        ans = rune
        for i in range(2, n+1):
            ans = beside(rune, stack(ans, ans))
        return ans


###########
# Task 1c #
###########

def dual_fractal(rune1, rune2, n):
    if n == 1:
        return rune1
    else:
        return beside(rune1, stack(dual_fractal(rune2, rune1, n-1), dual_fractal(rune2, rune1, n-1)))

###########
# Task 1d #
###########

def dual_fractal_iter(pic1, pic2, n):
    if n % 2 == 0:
        pic1, pic2 = pic2, pic1
   
    result = pic1
    
    for i in range(1, n):
        pic1, pic2 = pic2, pic1
        result = beside(pic1, stack(result, result))
        
    return result


##########
# Task 2 #
##########

def steps(rune1, rune2, rune3, rune4):
    def last_level(rune1):
        return stack(beside(blank_bb, rune1), blank_bb)

    def seclast_level(rune2):
        return stack(blank_bb, beside(blank_bb, rune2))

    def sectop_level(rune3):
        return stack(blank_bb, beside(rune3, blank_bb))

    def top_level(rune4):
        return stack(beside(rune4, blank_bb), blank_bb)

    return overlay(overlay(top_level(rune4),sectop_level(rune3)), overlay(seclast_level(rune2), last_level(rune1)))



